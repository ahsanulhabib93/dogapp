name: Deploy2Prod
on:
  release:
    types: [published]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_PRODUCTION_CLUSTER: ${{ secrets.GKE_PRODUCTION_CLUSTER }}    # TODO: update to cluster name
  GKE_ZONE: ${{ secrets.GKE_ZONE }}   # TODO: update to cluster zone
  GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}

jobs:
  deploy-prod:
    name: Setup, Build, Publish, and Deploy to Production
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      # Setup gcloud CLI
      - uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - uses: google-github-actions/setup-gcloud@v0
      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker
      # Build and Push the Docker image to Google Container Registry
      - name: Build and push
        id: build
        run: |
          IMAGE_TAG=${GITHUB_REF##*/}
          docker build -t ss2 . --build-arg GITHUB_TOKEN="${{secrets.PAT_GITHUB}}" -f docker/Dockerfile
          docker tag ss2 gcr.io/voonik-tech/vnkshopup/ss2:${GITHUB_REF##*/}
          docker push gcr.io/voonik-tech/vnkshopup/ss2:${GITHUB_REF##*/}
          echo "::set-output name=version::$IMAGE_TAG"

      - id: 'get-credentials'
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: 'mokam-prod'
          location: 'asia-southeast1'

      # Deploy to production GKE cluster
      - name: Apply Proto Config to production
        run: |
          #gcloud container clusters get-credentials mokam-prod --zone asia-southeast1 --project $PROJECT_ID
          ### Update envoy grpc transcoder if any changes are made to protobuf file ###
            git clone https://$GITHUB_TOKEN@github.com/Voonik/goConnect.git
            cd goConnect
            git checkout $(grep "github.com/voonik/goConnect" ../go.mod | awk -F'-' '{print $(NF)}')
            cd -
            git clone https://github.com/googleapis/googleapis
            GOOGLEAPIS_DIR=./googleapis
            cp goConnect/api/proto/health/health_v1.proto .
            cp goConnect/api/proto/ss2/{supplier*,payment*,key*} .
            sed -i 's/\/\/transcoder//' supplier.proto supplier_address.proto payment_account_detail.proto key_account_manager.proto health_v1.proto
            sudo apt install -y protobuf-compiler
            protoc -I${GOOGLEAPIS_DIR} -I. --include_imports --include_source_info --descriptor_set_out=supplier.pb supplier.proto supplier_address.proto payment_account_detail.proto key_account_manager.proto health_v1.proto
            kubectl -n mokam create configmap ss2-proto-bin --from-file=supplier.pb -o yaml --dry-run=client | kubectl apply -f -
          ################################################################################

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: shopuptech/cicd-automation
          token: ${{ secrets.GIHUB_PAT }}
          ref: 'master'

      - name: Update protoservices
        run: |
          yq -i 'del(.protoservices.[])' charts/shopup/ss2/values-production.yaml
          custom=( 
              "health.health_v1.Health"
              "ss2.supplier.Supplier"
              "ss2.payment_account_detail.PaymentAccountDetail"
              "ss2.key_account_manager.KeyAccountManager"
              "ss2.supplier_address.SupplierAddress"
          i=0
          for value in "${custom[@]}"; do
            yq -i ".protoservices[$((i))]=\"${value}\"" charts/shopup/ss2/values-production.yaml
            i=$((i+1))
          done
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add charts/shopup/ss2/values-production.yaml
          git commit -m "feat(helm): Update Proto to latest image"
          git push origin golang-test

      - name: Deploying to GCP Cluster
        uses: fjogeleit/yaml-update-action@master
        with:
          valueFile: 'charts/shopup/ss2/values-production.yaml'
          propertyPath: 'image.tag'
          value: ${{ steps.build.outputs.version }}
          repository: shopuptech/cicd-automation
          branch: master
          updateFile: true
          message: 'feat(helm): Update Image Version to ${{ steps.build.outputs.version }}'
          token: ${{ secrets.GIHUB_PAT }}
