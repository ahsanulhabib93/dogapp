// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	"github.com/voonik/goFramework/pkg/rest"
	"github.com/voonik/ss2/internal/app/helpers"
)

type ApiCallHelperInterface struct {
	mock.Mock
	Count map[string]int
}

func SetApiCallerMock() *ApiCallHelperInterface {
	mock := &ApiCallHelperInterface{Count: map[string]int{}}
	helpers.InjectMockApiCallHelperInstance(mock)

	return mock
}

func UnsetApiCallerMock() {
	helpers.InjectMockApiCallHelperInstance(nil)
}

func (_m *ApiCallHelperInterface) Get(ctx context.Context, url string, headers map[string]string) (*rest.Response, error) {
	args := _m.Called(ctx, url, headers)
	_m.Count[helpers.MethodGet] += 1
	return args.Get(0).(*rest.Response), args.Error(1)
}

func (_m *ApiCallHelperInterface) Post(ctx context.Context, url string, headers map[string]string, body []byte) (*rest.Response, error) {
	ret := _m.Called(ctx, url, headers, body)
	_m.Count[helpers.MethodPost] += 1
	var r0 *rest.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string, []byte) *rest.Response); ok {
		r0 = rf(ctx, url, headers, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string, []byte) error); ok {
		r1 = rf(ctx, url, headers, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
