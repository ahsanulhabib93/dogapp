// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	"github.com/voonik/goConnect/api/go/cre_admin/users_detail"
	otp "github.com/voonik/goConnect/api/go/vigeon2/otp"

	testing "testing"
)

// APIHelperInterface is an autogenerated mock type for the APIHelperInterface type
type APIHelperInterface struct {
	mock.Mock
}

// SendOtpAPI provides a mock function with given fields: _a0, _a1
func (_m *APIHelperInterface) SendOtpAPI(_a0 context.Context, _a1 otp.OtpParam) *otp.OtpResponse {
	ret := _m.Called(_a0, _a1)

	var r0 *otp.OtpResponse
	if rf, ok := ret.Get(0).(func(context.Context, otp.OtpParam) *otp.OtpResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*otp.OtpResponse)
		}
	}

	return r0
}

// VerifyOtpAPI provides a mock function with given fields: _a0, _a1
func (_m *APIHelperInterface) VerifyOtpAPI(_a0 context.Context, _a1 otp.VerifyOtpParam) *otp.OtpResponse {
	ret := _m.Called(_a0, _a1)

	var r0 *otp.OtpResponse
	if rf, ok := ret.Get(0).(func(context.Context, otp.VerifyOtpParam) *otp.OtpResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*otp.OtpResponse)
		}
	}

	return r0
}

// FindUserByPhone provides a mock function with given fields: _a0, _a1
func (_m *APIHelperInterface) FindUserByPhone(_a0 context.Context, _a1 string) *users_detail.UserInfo {
	ret := _m.Called(_a0, _a1)

	var r0 *users_detail.UserInfo
	if rf, ok := ret.Get(0).(func(context.Context, string) *users_detail.UserInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users_detail.UserInfo)
		}
	}

	return r0
}

// NewAPIHelperInterface creates a new instance of APIHelperInterface. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewAPIHelperInterface(t testing.TB) *APIHelperInterface {
	mock := &APIHelperInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
