// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	publisher "github.com/voonik/goConnect/api/go/event_bus/publisher"
)

// PublisherClient is an autogenerated mock type for the PublisherClient type
type PublisherClient struct {
	mock.Mock
}

func (_m *PublisherClient) BulkPublish(ctx context.Context, in *publisher.BulkPublishRequest, opts ...grpc.CallOption) (*publisher.PublishResponse, error) {
	//TODO implement me
	panic("implement me")
}

// Publish provides a mock function with given fields: ctx, in, opts
func (_m *PublisherClient) Publish(ctx context.Context, in *publisher.PublishRequest, opts ...grpc.CallOption) (*publisher.PublishResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *publisher.PublishResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *publisher.PublishRequest, ...grpc.CallOption) (*publisher.PublishResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *publisher.PublishRequest, ...grpc.CallOption) *publisher.PublishResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*publisher.PublishResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *publisher.PublishRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPublisherClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewPublisherClient creates a new instance of PublisherClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPublisherClient(t mockConstructorTestingTNewPublisherClient) *PublisherClient {
	mock := &PublisherClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

func SetupMockPublisherClient(t mockConstructorTestingTNewPublisherClient, EventBusPublisher *func() publisher.PublisherClient) (mockedEventBus *PublisherClient, reset func()) {
	mockedEventBus = NewPublisherClient(t)
	originalEventBus := EventBusPublisher
	*EventBusPublisher = func() publisher.PublisherClient {
		return mockedEventBus
	}
	return mockedEventBus, func() { EventBusPublisher = originalEventBus }
}
